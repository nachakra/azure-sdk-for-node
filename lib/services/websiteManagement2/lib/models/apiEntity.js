/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * API Management
 *
 * @extends models['Resource']
 */
class ApiEntity extends models['Resource'] {
  /**
   * Create a ApiEntity.
   * @property {string} [apiEntityName] Name of the API
   * the URL path of this API when exposed via APIM
   * @property {object} [generalInformation] the URL path of this API when
   * exposed via APIM
   * @property {string} [generalInformation.iconUrl] Icon Url
   * @property {string} [generalInformation.displayName] Display Name
   * @property {string} [generalInformation.description] Description
   * @property {string} [generalInformation.termsOfUseUrl] a public accessible
   * url of the Terms Of Use Url of this API
   * @property {string} [generalInformation.connectionDisplayName]
   * DefaultConnectionNameTemplate
   * @property {object} [generalInformation.connectionPortalUrl]
   * ConnectionPortalUrl
   * @property {string} [path] the URL path of this API when exposed via APIM
   * @property {array} [runtimeUrls] Read only property returning the runtime
   * endpoints where the API can be called
   * @property {array} [protocols] Protocols supported by the front end -
   * http/https
   * @property {object} [policies] API policies
   * @property {string} [policies.content] Content of xml policy
   * @property {object} [backendService] Backend service definition
   * @property {string} [backendService.serviceUrl] Url from which the swagger
   * payload will be fetched
   * @property {array} [backendService.hostingEnvironmentServiceUrls] Service
   * Urls per Hosting environment
   * @property {string} [apiDefinitionUrl] API definition Url - url where the
   * swagger can be downloaded from
   * @property {object} [metadata] Free form object for the data caller wants
   * to store
   * @property {array} [capabilities] Capabilities
   * @property {object} [connectionParameters] Connection parameters
   * @property {date} [createdTime] Timestamp of the connection creation
   * @property {date} [changedTime] Timestamp of last connection change.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of ApiEntity
   *
   * @returns {object} metadata of ApiEntity
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'ApiEntity',
      type: {
        name: 'Composite',
        className: 'ApiEntity',
        modelProperties: {
          id: {
            required: false,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          kind: {
            required: false,
            serializedName: 'kind',
            type: {
              name: 'String'
            }
          },
          location: {
            required: true,
            serializedName: 'location',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          tags: {
            required: false,
            serializedName: 'tags',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          apiEntityName: {
            required: false,
            serializedName: 'properties.name',
            type: {
              name: 'String'
            }
          },
          generalInformation: {
            required: false,
            serializedName: 'properties.generalInformation',
            type: {
              name: 'Composite',
              className: 'GeneralApiInformation'
            }
          },
          path: {
            required: false,
            serializedName: 'properties.path',
            type: {
              name: 'String'
            }
          },
          runtimeUrls: {
            required: false,
            serializedName: 'properties.runtimeUrls',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          protocols: {
            required: false,
            serializedName: 'properties.protocols',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          policies: {
            required: false,
            serializedName: 'properties.policies',
            type: {
              name: 'Composite',
              className: 'ApiPolicies'
            }
          },
          backendService: {
            required: false,
            serializedName: 'properties.backendService',
            type: {
              name: 'Composite',
              className: 'BackendServiceDefinition'
            }
          },
          apiDefinitionUrl: {
            required: false,
            serializedName: 'properties.apiDefinitionUrl',
            type: {
              name: 'String'
            }
          },
          metadata: {
            required: false,
            serializedName: 'properties.metadata',
            type: {
              name: 'Object'
            }
          },
          capabilities: {
            required: false,
            serializedName: 'properties.capabilities',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          connectionParameters: {
            required: false,
            serializedName: 'properties.connectionParameters',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'ConnectionParameterElementType',
                  type: {
                    name: 'Composite',
                    className: 'ConnectionParameter'
                  }
              }
            }
          },
          createdTime: {
            required: false,
            serializedName: 'properties.createdTime',
            type: {
              name: 'DateTime'
            }
          },
          changedTime: {
            required: false,
            serializedName: 'properties.changedTime',
            type: {
              name: 'DateTime'
            }
          }
        }
      }
    };
  }
}

module.exports = ApiEntity;
