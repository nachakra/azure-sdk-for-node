/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * API Connection
 *
 * @extends models['Resource']
 */
class Connection extends models['Resource'] {
  /**
   * Create a Connection.
   * @property {string} [connectionName] connection name
   * @property {string} [displayName] display name
   * @property {array} [statuses] Status of the connection
   * @property {object} [customParameterValues] Custom login setting values.
   * @property {string} [tenantId]
   * @property {object} [parameterValues] Tokens/Claim
   * @property {object} [nonSecretParameterValues] Tokens/Claim
   * @property {object} [metadata]
   * @property {date} [firstExpirationTime] Time in UTC when the first
   * expiration of OAuth tokens
   * @property {array} [keywords] List of Keywords that tag the acl
   * @property {date} [createdTime] Timestamp of the connection creation
   * @property {date} [changedTime] Timestamp of last connection change.
   * @property {object} [api] expanded connection provider name
   * @property {string} [api.expandedParentApiEntityId] Id of connection
   * provider
   * @property {object} [api.entity] Id of connection provider
   * @property {string} [api.entity.id] Resource Id. Typically id is populated
   * only for responses to GET requests. Caller is responsible for passing in
   * this
   * value for GET requests only.
   * For example:
   * /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupId}/providers/Microsoft.Web/sites/{sitename}
   * @property {string} [api.entity.name] Name of resource
   * @property {string} [api.entity.type] Type of resource e.g
   * Microsoft.Web/sites
   * @property {string} [api.entity.location] Geo region resource belongs to
   * e.g. SouthCentralUS, SouthEastAsia
   * @property {object} [api.entity.tags] Tags associated with resource
   * @property {object} [api.entity.plan] Azure resource manager plan
   * @property {string} [api.entity.plan.name] The name
   * @property {string} [api.entity.plan.publisher] The publisher
   * @property {string} [api.entity.plan.product] The product
   * @property {string} [api.entity.plan.promotionCode] The promotion code
   * @property {string} [api.entity.plan.version] Version of product
   * @property {object} [api.entity.properties] Resource specific properties
   * @property {string} [api.entity.properties.apiEntityName] Name of the API
   * the URL path of this API when exposed via APIM
   * @property {object} [api.entity.properties.generalInformation] the URL path
   * of this API when exposed via APIM
   * @property {string} [api.entity.properties.generalInformation.iconUrl] Icon
   * Url
   * @property {string} [api.entity.properties.generalInformation.displayName]
   * Display Name
   * @property {string} [api.entity.properties.generalInformation.description]
   * Description
   * @property {string}
   * [api.entity.properties.generalInformation.termsOfUseUrl] a public
   * accessible url of the Terms Of Use Url of this API
   * @property {string}
   * [api.entity.properties.generalInformation.connectionDisplayName]
   * DefaultConnectionNameTemplate
   * @property {object}
   * [api.entity.properties.generalInformation.connectionPortalUrl]
   * ConnectionPortalUrl
   * @property {string} [api.entity.properties.path] the URL path of this API
   * when exposed via APIM
   * @property {array} [api.entity.properties.runtimeUrls] Read only property
   * returning the runtime endpoints where the API can be called
   * @property {array} [api.entity.properties.protocols] Protocols supported by
   * the front end - http/https
   * @property {object} [api.entity.properties.policies] API policies
   * @property {string} [api.entity.properties.policies.content] Content of xml
   * policy
   * @property {object} [api.entity.properties.backendService] Backend service
   * definition
   * @property {string} [api.entity.properties.backendService.serviceUrl] Url
   * from which the swagger payload will be fetched
   * @property {array}
   * [api.entity.properties.backendService.hostingEnvironmentServiceUrls]
   * Service Urls per Hosting environment
   * @property {string} [api.entity.properties.apiDefinitionUrl] API definition
   * Url - url where the swagger can be downloaded from
   * @property {object} [api.entity.properties.metadata] Free form object for
   * the data caller wants to store
   * @property {array} [api.entity.properties.capabilities] Capabilities
   * @property {object} [api.entity.properties.connectionParameters] Connection
   * parameters
   * @property {date} [api.entity.properties.createdTime] Timestamp of the
   * connection creation
   * @property {date} [api.entity.properties.changedTime] Timestamp of last
   * connection change.
   * @property {object} [api.entity.sku] Sku description of the resource
   * @property {string} [api.entity.sku.name] Name of the resource sku
   * @property {string} [api.entity.sku.tier] Service Tier of the resource sku
   * @property {string} [api.entity.sku.size] Size specifier of the resource
   * sku
   * @property {string} [api.entity.sku.family] Family code of the resource sku
   * @property {number} [api.entity.sku.capacity] Current number of instances
   * assigned to the resource
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of Connection
   *
   * @returns {object} metadata of Connection
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'Connection',
      type: {
        name: 'Composite',
        className: 'Connection',
        modelProperties: {
          id: {
            required: false,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          kind: {
            required: false,
            serializedName: 'kind',
            type: {
              name: 'String'
            }
          },
          location: {
            required: true,
            serializedName: 'location',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          tags: {
            required: false,
            serializedName: 'tags',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          connectionName: {
            required: false,
            serializedName: 'properties.name',
            type: {
              name: 'String'
            }
          },
          displayName: {
            required: false,
            serializedName: 'properties.displayName',
            type: {
              name: 'String'
            }
          },
          statuses: {
            required: false,
            serializedName: 'properties.statuses',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ConnectionStatusElementType',
                  type: {
                    name: 'Composite',
                    className: 'ConnectionStatus'
                  }
              }
            }
          },
          customParameterValues: {
            required: false,
            serializedName: 'properties.customParameterValues',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'ParameterCustomLoginSettingValuesElementType',
                  type: {
                    name: 'Composite',
                    className: 'ParameterCustomLoginSettingValues'
                  }
              }
            }
          },
          tenantId: {
            required: false,
            serializedName: 'properties.tenantId',
            type: {
              name: 'String'
            }
          },
          parameterValues: {
            required: false,
            serializedName: 'properties.parameterValues',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'ObjectElementType',
                  type: {
                    name: 'Object'
                  }
              }
            }
          },
          nonSecretParameterValues: {
            required: false,
            serializedName: 'properties.nonSecretParameterValues',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'ObjectElementType',
                  type: {
                    name: 'Object'
                  }
              }
            }
          },
          metadata: {
            required: false,
            serializedName: 'properties.metadata',
            type: {
              name: 'Object'
            }
          },
          firstExpirationTime: {
            required: false,
            serializedName: 'properties.firstExpirationTime',
            type: {
              name: 'DateTime'
            }
          },
          keywords: {
            required: false,
            serializedName: 'properties.keywords',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          createdTime: {
            required: false,
            serializedName: 'properties.createdTime',
            type: {
              name: 'DateTime'
            }
          },
          changedTime: {
            required: false,
            serializedName: 'properties.changedTime',
            type: {
              name: 'DateTime'
            }
          },
          api: {
            required: false,
            serializedName: 'properties.api',
            type: {
              name: 'Composite',
              className: 'ExpandedParentApiEntity'
            }
          }
        }
      }
    };
  }
}

module.exports = Connection;
