/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * connection provider parameters
 *
 */
class ConnectionParameter {
  /**
   * Create a ConnectionParameter.
   * @property {string} [type] Type of the parameter. Possible values include:
   * 'string', 'securestring', 'secureobject', 'int', 'bool', 'object',
   * 'array', 'oauthSetting', 'connection'
   * @property {object} [defaultValue] Default parameter value
   * @property {object} [oAuthSettings] Settings defining OAuth flow for the
   * back end provider
   * @property {string} [oAuthSettings.identityProvider] Identity provider
   * @property {string} [oAuthSettings.clientId] Resource provider client id
   * @property {string} [oAuthSettings.clientSecret] Client Secret needed for
   * OAuth
   * @property {array} [oAuthSettings.scopes] OAuth scopes
   * @property {string} [oAuthSettings.redirectUrl] Url
   * @property {object} [oAuthSettings.properties] Read only properties for
   * this oauth setting.
   * @property {object} [oAuthSettings.customParameters] OAuth parameters key
   * is the name of parameter
   * @property {object} [uiDefinition] UI definitions
   */
  constructor() {
  }

  /**
   * Defines the metadata of ConnectionParameter
   *
   * @returns {object} metadata of ConnectionParameter
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'ConnectionParameter',
      type: {
        name: 'Composite',
        className: 'ConnectionParameter',
        modelProperties: {
          type: {
            required: false,
            serializedName: 'type',
            type: {
              name: 'Enum',
              allowedValues: [ 'string', 'securestring', 'secureobject', 'int', 'bool', 'object', 'array', 'oauthSetting', 'connection' ]
            }
          },
          defaultValue: {
            required: false,
            serializedName: 'defaultValue',
            type: {
              name: 'Object'
            }
          },
          oAuthSettings: {
            required: false,
            serializedName: 'oAuthSettings',
            type: {
              name: 'Composite',
              className: 'ApiOAuthSettings'
            }
          },
          uiDefinition: {
            required: false,
            serializedName: 'uiDefinition',
            type: {
              name: 'Object'
            }
          }
        }
      }
    };
  }
}

module.exports = ConnectionParameter;
