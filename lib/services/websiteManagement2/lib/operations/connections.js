/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const msRest = require('ms-rest');
const msRestAzure = require('ms-rest-azure');
const WebResource = msRest.WebResource;

/**
 * @summary Get Connections
 *
 * Gets a list of connections.
 *
 * @param {string} resourceGroupName Resource Group Name
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {number} [options.top] The number of items to be included in the
 * result.
 *
 * @param {string} [options.filter] The filter to apply on the operation.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link ConnectionCollection} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _list(resourceGroupName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let top = (options && options.top !== undefined) ? options.top : undefined;
  let filter = (options && options.filter !== undefined) ? options.filter : undefined;
  // Validate
  try {
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (top !== null && top !== undefined && typeof top !== 'number') {
      throw new Error('top must be of type number.');
    }
    if (filter !== null && filter !== undefined && typeof filter.valueOf() !== 'string') {
      throw new Error('filter must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/connections';
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (top !== null && top !== undefined) {
    queryParameters.push('$top=' + encodeURIComponent(top.toString()));
  }
  if (filter !== null && filter !== undefined) {
    queryParameters.push('$filter=' + encodeURIComponent(filter));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ConnectionCollection']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Gets a connection.
 *
 * @param {string} resourceGroupName The resource group name.
 *
 * @param {string} connectionName The connection name.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link Connection} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _get(resourceGroupName, connectionName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (connectionName === null || connectionName === undefined || typeof connectionName.valueOf() !== 'string') {
      throw new Error('connectionName cannot be null or undefined and it must be of type string.');
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/connections/{connectionName}';
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{connectionName}', encodeURIComponent(connectionName));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['Connection']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Creates or updates a connection.
 *
 * @param {string} resourceGroupName The resource group name.
 *
 * @param {string} connectionName The connection name.
 *
 * @param {object} connection The connection.
 *
 * @param {string} [connection.connectionName] connection name
 *
 * @param {string} [connection.displayName] display name
 *
 * @param {array} [connection.statuses] Status of the connection
 *
 * @param {object} [connection.customParameterValues] Custom login setting
 * values.
 *
 * @param {string} [connection.tenantId]
 *
 * @param {object} [connection.parameterValues] Tokens/Claim
 *
 * @param {object} [connection.nonSecretParameterValues] Tokens/Claim
 *
 * @param {object} [connection.metadata]
 *
 * @param {date} [connection.firstExpirationTime] Time in UTC when the first
 * expiration of OAuth tokens
 *
 * @param {array} [connection.keywords] List of Keywords that tag the acl
 *
 * @param {date} [connection.createdTime] Timestamp of the connection creation
 *
 * @param {date} [connection.changedTime] Timestamp of last connection change.
 *
 * @param {object} [connection.api] expanded connection provider name
 *
 * @param {string} [connection.api.expandedParentApiEntityId] Id of connection
 * provider
 *
 * @param {object} [connection.api.entity] Id of connection provider
 *
 * @param {string} [connection.api.entity.id] Resource Id. Typically id is
 * populated only for responses to GET requests. Caller is responsible for
 * passing in this
 * value for GET requests only.
 * For example:
 * /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupId}/providers/Microsoft.Web/sites/{sitename}
 *
 * @param {string} [connection.api.entity.name] Name of resource
 *
 * @param {string} [connection.api.entity.type] Type of resource e.g
 * Microsoft.Web/sites
 *
 * @param {string} [connection.api.entity.location] Geo region resource belongs
 * to e.g. SouthCentralUS, SouthEastAsia
 *
 * @param {object} [connection.api.entity.tags] Tags associated with resource
 *
 * @param {object} [connection.api.entity.plan] Azure resource manager plan
 *
 * @param {string} [connection.api.entity.plan.name] The name
 *
 * @param {string} [connection.api.entity.plan.publisher] The publisher
 *
 * @param {string} [connection.api.entity.plan.product] The product
 *
 * @param {string} [connection.api.entity.plan.promotionCode] The promotion
 * code
 *
 * @param {string} [connection.api.entity.plan.version] Version of product
 *
 * @param {object} [connection.api.entity.properties] Resource specific
 * properties
 *
 * @param {string} [connection.api.entity.properties.apiEntityName] Name of the
 * API
 * the URL path of this API when exposed via APIM
 *
 * @param {object} [connection.api.entity.properties.generalInformation] the
 * URL path of this API when exposed via APIM
 *
 * @param {string}
 * [connection.api.entity.properties.generalInformation.iconUrl] Icon Url
 *
 * @param {string}
 * [connection.api.entity.properties.generalInformation.displayName] Display
 * Name
 *
 * @param {string}
 * [connection.api.entity.properties.generalInformation.description]
 * Description
 *
 * @param {string}
 * [connection.api.entity.properties.generalInformation.termsOfUseUrl] a public
 * accessible url of the Terms Of Use Url of this API
 *
 * @param {string}
 * [connection.api.entity.properties.generalInformation.connectionDisplayName]
 * DefaultConnectionNameTemplate
 *
 * @param {object}
 * [connection.api.entity.properties.generalInformation.connectionPortalUrl]
 * ConnectionPortalUrl
 *
 * @param {string} [connection.api.entity.properties.generalInformation.id]
 * Resource Id
 *
 * @param {string} [connection.api.entity.properties.generalInformation.name]
 * Resource Name
 *
 * @param {string} [connection.api.entity.properties.generalInformation.kind]
 * Kind of resource
 *
 * @param {string} connection.api.entity.properties.generalInformation.location
 * Resource Location
 *
 * @param {string} [connection.api.entity.properties.generalInformation.type]
 * Resource type
 *
 * @param {object} [connection.api.entity.properties.generalInformation.tags]
 * Resource tags
 *
 * @param {string} [connection.api.entity.properties.path] the URL path of this
 * API when exposed via APIM
 *
 * @param {array} [connection.api.entity.properties.runtimeUrls] Read only
 * property returning the runtime endpoints where the API can be called
 *
 * @param {array} [connection.api.entity.properties.protocols] Protocols
 * supported by the front end - http/https
 *
 * @param {object} [connection.api.entity.properties.policies] API policies
 *
 * @param {string} [connection.api.entity.properties.policies.content] Content
 * of xml policy
 *
 * @param {string} [connection.api.entity.properties.policies.id] Resource Id
 *
 * @param {string} [connection.api.entity.properties.policies.name] Resource
 * Name
 *
 * @param {string} [connection.api.entity.properties.policies.kind] Kind of
 * resource
 *
 * @param {string} connection.api.entity.properties.policies.location Resource
 * Location
 *
 * @param {string} [connection.api.entity.properties.policies.type] Resource
 * type
 *
 * @param {object} [connection.api.entity.properties.policies.tags] Resource
 * tags
 *
 * @param {object} [connection.api.entity.properties.backendService] Backend
 * service definition
 *
 * @param {string} [connection.api.entity.properties.backendService.serviceUrl]
 * Url from which the swagger payload will be fetched
 *
 * @param {array}
 * [connection.api.entity.properties.backendService.hostingEnvironmentServiceUrls]
 * Service Urls per Hosting environment
 *
 * @param {string} [connection.api.entity.properties.backendService.id]
 * Resource Id
 *
 * @param {string} [connection.api.entity.properties.backendService.name]
 * Resource Name
 *
 * @param {string} [connection.api.entity.properties.backendService.kind] Kind
 * of resource
 *
 * @param {string} connection.api.entity.properties.backendService.location
 * Resource Location
 *
 * @param {string} [connection.api.entity.properties.backendService.type]
 * Resource type
 *
 * @param {object} [connection.api.entity.properties.backendService.tags]
 * Resource tags
 *
 * @param {string} [connection.api.entity.properties.apiDefinitionUrl] API
 * definition Url - url where the swagger can be downloaded from
 *
 * @param {object} [connection.api.entity.properties.metadata] Free form object
 * for the data caller wants to store
 *
 * @param {array} [connection.api.entity.properties.capabilities] Capabilities
 *
 * @param {object} [connection.api.entity.properties.connectionParameters]
 * Connection parameters
 *
 * @param {date} [connection.api.entity.properties.createdTime] Timestamp of
 * the connection creation
 *
 * @param {date} [connection.api.entity.properties.changedTime] Timestamp of
 * last connection change.
 *
 * @param {string} [connection.api.entity.properties.id] Resource Id
 *
 * @param {string} [connection.api.entity.properties.name] Resource Name
 *
 * @param {string} [connection.api.entity.properties.kind] Kind of resource
 *
 * @param {string} connection.api.entity.properties.location Resource Location
 *
 * @param {string} [connection.api.entity.properties.type] Resource type
 *
 * @param {object} [connection.api.entity.properties.tags] Resource tags
 *
 * @param {object} [connection.api.entity.sku] Sku description of the resource
 *
 * @param {string} [connection.api.entity.sku.name] Name of the resource sku
 *
 * @param {string} [connection.api.entity.sku.tier] Service Tier of the
 * resource sku
 *
 * @param {string} [connection.api.entity.sku.size] Size specifier of the
 * resource sku
 *
 * @param {string} [connection.api.entity.sku.family] Family code of the
 * resource sku
 *
 * @param {number} [connection.api.entity.sku.capacity] Current number of
 * instances assigned to the resource
 *
 * @param {string} [connection.api.id] Resource Id
 *
 * @param {string} [connection.api.name] Resource Name
 *
 * @param {string} [connection.api.kind] Kind of resource
 *
 * @param {string} connection.api.location Resource Location
 *
 * @param {string} [connection.api.type] Resource type
 *
 * @param {object} [connection.api.tags] Resource tags
 *
 * @param {string} [connection.id] Resource Id
 *
 * @param {string} [connection.name] Resource Name
 *
 * @param {string} [connection.kind] Kind of resource
 *
 * @param {string} connection.location Resource Location
 *
 * @param {string} [connection.type] Resource type
 *
 * @param {object} [connection.tags] Resource tags
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link Connection} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _createOrUpdate(resourceGroupName, connectionName, connection, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (connectionName === null || connectionName === undefined || typeof connectionName.valueOf() !== 'string') {
      throw new Error('connectionName cannot be null or undefined and it must be of type string.');
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (connection === null || connection === undefined) {
      throw new Error('connection cannot be null or undefined.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/connections/{connectionName}';
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{connectionName}', encodeURIComponent(connectionName));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PUT';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (connection !== null && connection !== undefined) {
      let requestModelMapper = new client.models['Connection']().mapper();
      requestModel = client.serialize(requestModelMapper, connection, 'connection');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(connection, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 201) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['Connection']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }
    // Deserialize Response
    if (statusCode === 201) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['Connection']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError1 = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError1.request = msRest.stripRequest(httpRequest);
        deserializationError1.response = msRest.stripResponse(response);
        return callback(deserializationError1);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Deletes a connection.
 *
 * @param {string} resourceGroupName The resource group name.
 *
 * @param {string} connectionName The connection name.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _deleteMethod(resourceGroupName, connectionName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (connectionName === null || connectionName === undefined || typeof connectionName.valueOf() !== 'string') {
      throw new Error('connectionName cannot be null or undefined and it must be of type string.');
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/connections/{connectionName}';
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{connectionName}', encodeURIComponent(connectionName));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 204) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Lists consent links of a connection.
 *
 * @param {string} resourceGroupName The resource group name.
 *
 * @param {string} connectionName The connection name.
 *
 * @param {object} content The content.
 *
 * @param {array} [content.parameters] Array of links
 *
 * @param {string} [content.id] Resource Id
 *
 * @param {string} [content.name] Resource Name
 *
 * @param {string} [content.kind] Kind of resource
 *
 * @param {string} content.location Resource Location
 *
 * @param {string} [content.type] Resource type
 *
 * @param {object} [content.tags] Resource tags
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link ConsentLinkPayload} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _listConsentLinks(resourceGroupName, connectionName, content, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (connectionName === null || connectionName === undefined || typeof connectionName.valueOf() !== 'string') {
      throw new Error('connectionName cannot be null or undefined and it must be of type string.');
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (content === null || content === undefined) {
      throw new Error('content cannot be null or undefined.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/connections/{connectionName}/listConsentLinks';
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{connectionName}', encodeURIComponent(connectionName));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (content !== null && content !== undefined) {
      let requestModelMapper = new client.models['ConsentLinkInput']().mapper();
      requestModel = client.serialize(requestModelMapper, content, 'content');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(content, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ConsentLinkPayload']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Confirms consent code of a connection.
 *
 * @param {string} resourceGroupName The resource group name.
 *
 * @param {string} connectionName The connection name.
 *
 * @param {object} content The content.
 *
 * @param {string} [content.principalType] Principal type. Possible values
 * include: 'ActiveDirectory', 'Connection', 'MicrosoftAccount'
 *
 * @param {string} [content.tenantId] Tenant Id
 *
 * @param {string} [content.objectId] AAD object ID. This is userId
 *
 * @param {string} [content.code] Code that was returned during consent flow
 *
 * @param {string} [content.id] Resource Id
 *
 * @param {string} [content.name] Resource Name
 *
 * @param {string} [content.kind] Kind of resource
 *
 * @param {string} content.location Resource Location
 *
 * @param {string} [content.type] Resource type
 *
 * @param {object} [content.tags] Resource tags
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link Connection} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _confirmConsentCode(resourceGroupName, connectionName, content, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (connectionName === null || connectionName === undefined || typeof connectionName.valueOf() !== 'string') {
      throw new Error('connectionName cannot be null or undefined and it must be of type string.');
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (content === null || content === undefined) {
      throw new Error('content cannot be null or undefined.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/connections/{connectionName}/confirmConsentCode';
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{connectionName}', encodeURIComponent(connectionName));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (content !== null && content !== undefined) {
      let requestModelMapper = new client.models['ConfirmConsentCodeInput']().mapper();
      requestModel = client.serialize(requestModelMapper, content, 'content');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(content, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['Connection']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Lists connection keys.
 *
 * @param {string} resourceGroupName The resource group name.
 *
 * @param {string} connectionName The connection name.
 *
 * @param {object} content The content.
 *
 * @param {string} [content.validityTimeSpan] time span for how long the keys
 * will be valid
 *
 * @param {string} [content.id] Resource Id
 *
 * @param {string} [content.name] Resource Name
 *
 * @param {string} [content.kind] Kind of resource
 *
 * @param {string} content.location Resource Location
 *
 * @param {string} [content.type] Resource type
 *
 * @param {object} [content.tags] Resource tags
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link ConnectionSecrets} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _listConnectionKeys(resourceGroupName, connectionName, content, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (connectionName === null || connectionName === undefined || typeof connectionName.valueOf() !== 'string') {
      throw new Error('connectionName cannot be null or undefined and it must be of type string.');
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (content === null || content === undefined) {
      throw new Error('content cannot be null or undefined.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/connections/{connectionName}/listConnectionKeys';
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{connectionName}', encodeURIComponent(connectionName));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (content !== null && content !== undefined) {
      let requestModelMapper = new client.models['ListConnectionKeysInput']().mapper();
      requestModel = client.serialize(requestModelMapper, content, 'content');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(content, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ConnectionSecrets']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Get Connections
 *
 * Gets a list of connections.
 *
 * @param {string} nextPageLink The NextLink from the previous successful call
 * to List operation.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link ConnectionCollection} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _listNext(nextPageLink, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {
      throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let requestUrl = '{nextLink}';
  requestUrl = requestUrl.replace('{nextLink}', nextPageLink);

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ConnectionCollection']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/** Class representing a Connections. */
class Connections {
  /**
   * Create a Connections.
   * @param {WebSiteManagementClient} client Reference to the service client.
   */
  constructor(client) {
    this.client = client;
    this._list = _list;
    this._get = _get;
    this._createOrUpdate = _createOrUpdate;
    this._deleteMethod = _deleteMethod;
    this._listConsentLinks = _listConsentLinks;
    this._confirmConsentCode = _confirmConsentCode;
    this._listConnectionKeys = _listConnectionKeys;
    this._listNext = _listNext;
  }

  /**
   * @summary Get Connections
   *
   * Gets a list of connections.
   *
   * @param {string} resourceGroupName Resource Group Name
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.top] The number of items to be included in the
   * result.
   *
   * @param {string} [options.filter] The filter to apply on the operation.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ConnectionCollection>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listWithHttpOperationResponse(resourceGroupName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._list(resourceGroupName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Get Connections
   *
   * Gets a list of connections.
   *
   * @param {string} resourceGroupName Resource Group Name
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.top] The number of items to be included in the
   * result.
   *
   * @param {string} [options.filter] The filter to apply on the operation.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {ConnectionCollection} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ConnectionCollection} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  list(resourceGroupName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._list(resourceGroupName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._list(resourceGroupName, options, optionalCallback);
    }
  }

  /**
   * Gets a connection.
   *
   * @param {string} resourceGroupName The resource group name.
   *
   * @param {string} connectionName The connection name.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Connection>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getWithHttpOperationResponse(resourceGroupName, connectionName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._get(resourceGroupName, connectionName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Gets a connection.
   *
   * @param {string} resourceGroupName The resource group name.
   *
   * @param {string} connectionName The connection name.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Connection} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Connection} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  get(resourceGroupName, connectionName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._get(resourceGroupName, connectionName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._get(resourceGroupName, connectionName, options, optionalCallback);
    }
  }

  /**
   * Creates or updates a connection.
   *
   * @param {string} resourceGroupName The resource group name.
   *
   * @param {string} connectionName The connection name.
   *
   * @param {object} connection The connection.
   *
   * @param {string} [connection.connectionName] connection name
   *
   * @param {string} [connection.displayName] display name
   *
   * @param {array} [connection.statuses] Status of the connection
   *
   * @param {object} [connection.customParameterValues] Custom login setting
   * values.
   *
   * @param {string} [connection.tenantId]
   *
   * @param {object} [connection.parameterValues] Tokens/Claim
   *
   * @param {object} [connection.nonSecretParameterValues] Tokens/Claim
   *
   * @param {object} [connection.metadata]
   *
   * @param {date} [connection.firstExpirationTime] Time in UTC when the first
   * expiration of OAuth tokens
   *
   * @param {array} [connection.keywords] List of Keywords that tag the acl
   *
   * @param {date} [connection.createdTime] Timestamp of the connection creation
   *
   * @param {date} [connection.changedTime] Timestamp of last connection change.
   *
   * @param {object} [connection.api] expanded connection provider name
   *
   * @param {string} [connection.api.expandedParentApiEntityId] Id of connection
   * provider
   *
   * @param {object} [connection.api.entity] Id of connection provider
   *
   * @param {string} [connection.api.entity.id] Resource Id. Typically id is
   * populated only for responses to GET requests. Caller is responsible for
   * passing in this
   * value for GET requests only.
   * For example:
   * /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupId}/providers/Microsoft.Web/sites/{sitename}
   *
   * @param {string} [connection.api.entity.name] Name of resource
   *
   * @param {string} [connection.api.entity.type] Type of resource e.g
   * Microsoft.Web/sites
   *
   * @param {string} [connection.api.entity.location] Geo region resource belongs
   * to e.g. SouthCentralUS, SouthEastAsia
   *
   * @param {object} [connection.api.entity.tags] Tags associated with resource
   *
   * @param {object} [connection.api.entity.plan] Azure resource manager plan
   *
   * @param {string} [connection.api.entity.plan.name] The name
   *
   * @param {string} [connection.api.entity.plan.publisher] The publisher
   *
   * @param {string} [connection.api.entity.plan.product] The product
   *
   * @param {string} [connection.api.entity.plan.promotionCode] The promotion
   * code
   *
   * @param {string} [connection.api.entity.plan.version] Version of product
   *
   * @param {object} [connection.api.entity.properties] Resource specific
   * properties
   *
   * @param {string} [connection.api.entity.properties.apiEntityName] Name of the
   * API
   * the URL path of this API when exposed via APIM
   *
   * @param {object} [connection.api.entity.properties.generalInformation] the
   * URL path of this API when exposed via APIM
   *
   * @param {string}
   * [connection.api.entity.properties.generalInformation.iconUrl] Icon Url
   *
   * @param {string}
   * [connection.api.entity.properties.generalInformation.displayName] Display
   * Name
   *
   * @param {string}
   * [connection.api.entity.properties.generalInformation.description]
   * Description
   *
   * @param {string}
   * [connection.api.entity.properties.generalInformation.termsOfUseUrl] a public
   * accessible url of the Terms Of Use Url of this API
   *
   * @param {string}
   * [connection.api.entity.properties.generalInformation.connectionDisplayName]
   * DefaultConnectionNameTemplate
   *
   * @param {object}
   * [connection.api.entity.properties.generalInformation.connectionPortalUrl]
   * ConnectionPortalUrl
   *
   * @param {string} [connection.api.entity.properties.generalInformation.id]
   * Resource Id
   *
   * @param {string} [connection.api.entity.properties.generalInformation.name]
   * Resource Name
   *
   * @param {string} [connection.api.entity.properties.generalInformation.kind]
   * Kind of resource
   *
   * @param {string} connection.api.entity.properties.generalInformation.location
   * Resource Location
   *
   * @param {string} [connection.api.entity.properties.generalInformation.type]
   * Resource type
   *
   * @param {object} [connection.api.entity.properties.generalInformation.tags]
   * Resource tags
   *
   * @param {string} [connection.api.entity.properties.path] the URL path of this
   * API when exposed via APIM
   *
   * @param {array} [connection.api.entity.properties.runtimeUrls] Read only
   * property returning the runtime endpoints where the API can be called
   *
   * @param {array} [connection.api.entity.properties.protocols] Protocols
   * supported by the front end - http/https
   *
   * @param {object} [connection.api.entity.properties.policies] API policies
   *
   * @param {string} [connection.api.entity.properties.policies.content] Content
   * of xml policy
   *
   * @param {string} [connection.api.entity.properties.policies.id] Resource Id
   *
   * @param {string} [connection.api.entity.properties.policies.name] Resource
   * Name
   *
   * @param {string} [connection.api.entity.properties.policies.kind] Kind of
   * resource
   *
   * @param {string} connection.api.entity.properties.policies.location Resource
   * Location
   *
   * @param {string} [connection.api.entity.properties.policies.type] Resource
   * type
   *
   * @param {object} [connection.api.entity.properties.policies.tags] Resource
   * tags
   *
   * @param {object} [connection.api.entity.properties.backendService] Backend
   * service definition
   *
   * @param {string} [connection.api.entity.properties.backendService.serviceUrl]
   * Url from which the swagger payload will be fetched
   *
   * @param {array}
   * [connection.api.entity.properties.backendService.hostingEnvironmentServiceUrls]
   * Service Urls per Hosting environment
   *
   * @param {string} [connection.api.entity.properties.backendService.id]
   * Resource Id
   *
   * @param {string} [connection.api.entity.properties.backendService.name]
   * Resource Name
   *
   * @param {string} [connection.api.entity.properties.backendService.kind] Kind
   * of resource
   *
   * @param {string} connection.api.entity.properties.backendService.location
   * Resource Location
   *
   * @param {string} [connection.api.entity.properties.backendService.type]
   * Resource type
   *
   * @param {object} [connection.api.entity.properties.backendService.tags]
   * Resource tags
   *
   * @param {string} [connection.api.entity.properties.apiDefinitionUrl] API
   * definition Url - url where the swagger can be downloaded from
   *
   * @param {object} [connection.api.entity.properties.metadata] Free form object
   * for the data caller wants to store
   *
   * @param {array} [connection.api.entity.properties.capabilities] Capabilities
   *
   * @param {object} [connection.api.entity.properties.connectionParameters]
   * Connection parameters
   *
   * @param {date} [connection.api.entity.properties.createdTime] Timestamp of
   * the connection creation
   *
   * @param {date} [connection.api.entity.properties.changedTime] Timestamp of
   * last connection change.
   *
   * @param {string} [connection.api.entity.properties.id] Resource Id
   *
   * @param {string} [connection.api.entity.properties.name] Resource Name
   *
   * @param {string} [connection.api.entity.properties.kind] Kind of resource
   *
   * @param {string} connection.api.entity.properties.location Resource Location
   *
   * @param {string} [connection.api.entity.properties.type] Resource type
   *
   * @param {object} [connection.api.entity.properties.tags] Resource tags
   *
   * @param {object} [connection.api.entity.sku] Sku description of the resource
   *
   * @param {string} [connection.api.entity.sku.name] Name of the resource sku
   *
   * @param {string} [connection.api.entity.sku.tier] Service Tier of the
   * resource sku
   *
   * @param {string} [connection.api.entity.sku.size] Size specifier of the
   * resource sku
   *
   * @param {string} [connection.api.entity.sku.family] Family code of the
   * resource sku
   *
   * @param {number} [connection.api.entity.sku.capacity] Current number of
   * instances assigned to the resource
   *
   * @param {string} [connection.api.id] Resource Id
   *
   * @param {string} [connection.api.name] Resource Name
   *
   * @param {string} [connection.api.kind] Kind of resource
   *
   * @param {string} connection.api.location Resource Location
   *
   * @param {string} [connection.api.type] Resource type
   *
   * @param {object} [connection.api.tags] Resource tags
   *
   * @param {string} [connection.id] Resource Id
   *
   * @param {string} [connection.name] Resource Name
   *
   * @param {string} [connection.kind] Kind of resource
   *
   * @param {string} connection.location Resource Location
   *
   * @param {string} [connection.type] Resource type
   *
   * @param {object} [connection.tags] Resource tags
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Connection>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  createOrUpdateWithHttpOperationResponse(resourceGroupName, connectionName, connection, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._createOrUpdate(resourceGroupName, connectionName, connection, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Creates or updates a connection.
   *
   * @param {string} resourceGroupName The resource group name.
   *
   * @param {string} connectionName The connection name.
   *
   * @param {object} connection The connection.
   *
   * @param {string} [connection.connectionName] connection name
   *
   * @param {string} [connection.displayName] display name
   *
   * @param {array} [connection.statuses] Status of the connection
   *
   * @param {object} [connection.customParameterValues] Custom login setting
   * values.
   *
   * @param {string} [connection.tenantId]
   *
   * @param {object} [connection.parameterValues] Tokens/Claim
   *
   * @param {object} [connection.nonSecretParameterValues] Tokens/Claim
   *
   * @param {object} [connection.metadata]
   *
   * @param {date} [connection.firstExpirationTime] Time in UTC when the first
   * expiration of OAuth tokens
   *
   * @param {array} [connection.keywords] List of Keywords that tag the acl
   *
   * @param {date} [connection.createdTime] Timestamp of the connection creation
   *
   * @param {date} [connection.changedTime] Timestamp of last connection change.
   *
   * @param {object} [connection.api] expanded connection provider name
   *
   * @param {string} [connection.api.expandedParentApiEntityId] Id of connection
   * provider
   *
   * @param {object} [connection.api.entity] Id of connection provider
   *
   * @param {string} [connection.api.entity.id] Resource Id. Typically id is
   * populated only for responses to GET requests. Caller is responsible for
   * passing in this
   * value for GET requests only.
   * For example:
   * /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupId}/providers/Microsoft.Web/sites/{sitename}
   *
   * @param {string} [connection.api.entity.name] Name of resource
   *
   * @param {string} [connection.api.entity.type] Type of resource e.g
   * Microsoft.Web/sites
   *
   * @param {string} [connection.api.entity.location] Geo region resource belongs
   * to e.g. SouthCentralUS, SouthEastAsia
   *
   * @param {object} [connection.api.entity.tags] Tags associated with resource
   *
   * @param {object} [connection.api.entity.plan] Azure resource manager plan
   *
   * @param {string} [connection.api.entity.plan.name] The name
   *
   * @param {string} [connection.api.entity.plan.publisher] The publisher
   *
   * @param {string} [connection.api.entity.plan.product] The product
   *
   * @param {string} [connection.api.entity.plan.promotionCode] The promotion
   * code
   *
   * @param {string} [connection.api.entity.plan.version] Version of product
   *
   * @param {object} [connection.api.entity.properties] Resource specific
   * properties
   *
   * @param {string} [connection.api.entity.properties.apiEntityName] Name of the
   * API
   * the URL path of this API when exposed via APIM
   *
   * @param {object} [connection.api.entity.properties.generalInformation] the
   * URL path of this API when exposed via APIM
   *
   * @param {string}
   * [connection.api.entity.properties.generalInformation.iconUrl] Icon Url
   *
   * @param {string}
   * [connection.api.entity.properties.generalInformation.displayName] Display
   * Name
   *
   * @param {string}
   * [connection.api.entity.properties.generalInformation.description]
   * Description
   *
   * @param {string}
   * [connection.api.entity.properties.generalInformation.termsOfUseUrl] a public
   * accessible url of the Terms Of Use Url of this API
   *
   * @param {string}
   * [connection.api.entity.properties.generalInformation.connectionDisplayName]
   * DefaultConnectionNameTemplate
   *
   * @param {object}
   * [connection.api.entity.properties.generalInformation.connectionPortalUrl]
   * ConnectionPortalUrl
   *
   * @param {string} [connection.api.entity.properties.generalInformation.id]
   * Resource Id
   *
   * @param {string} [connection.api.entity.properties.generalInformation.name]
   * Resource Name
   *
   * @param {string} [connection.api.entity.properties.generalInformation.kind]
   * Kind of resource
   *
   * @param {string} connection.api.entity.properties.generalInformation.location
   * Resource Location
   *
   * @param {string} [connection.api.entity.properties.generalInformation.type]
   * Resource type
   *
   * @param {object} [connection.api.entity.properties.generalInformation.tags]
   * Resource tags
   *
   * @param {string} [connection.api.entity.properties.path] the URL path of this
   * API when exposed via APIM
   *
   * @param {array} [connection.api.entity.properties.runtimeUrls] Read only
   * property returning the runtime endpoints where the API can be called
   *
   * @param {array} [connection.api.entity.properties.protocols] Protocols
   * supported by the front end - http/https
   *
   * @param {object} [connection.api.entity.properties.policies] API policies
   *
   * @param {string} [connection.api.entity.properties.policies.content] Content
   * of xml policy
   *
   * @param {string} [connection.api.entity.properties.policies.id] Resource Id
   *
   * @param {string} [connection.api.entity.properties.policies.name] Resource
   * Name
   *
   * @param {string} [connection.api.entity.properties.policies.kind] Kind of
   * resource
   *
   * @param {string} connection.api.entity.properties.policies.location Resource
   * Location
   *
   * @param {string} [connection.api.entity.properties.policies.type] Resource
   * type
   *
   * @param {object} [connection.api.entity.properties.policies.tags] Resource
   * tags
   *
   * @param {object} [connection.api.entity.properties.backendService] Backend
   * service definition
   *
   * @param {string} [connection.api.entity.properties.backendService.serviceUrl]
   * Url from which the swagger payload will be fetched
   *
   * @param {array}
   * [connection.api.entity.properties.backendService.hostingEnvironmentServiceUrls]
   * Service Urls per Hosting environment
   *
   * @param {string} [connection.api.entity.properties.backendService.id]
   * Resource Id
   *
   * @param {string} [connection.api.entity.properties.backendService.name]
   * Resource Name
   *
   * @param {string} [connection.api.entity.properties.backendService.kind] Kind
   * of resource
   *
   * @param {string} connection.api.entity.properties.backendService.location
   * Resource Location
   *
   * @param {string} [connection.api.entity.properties.backendService.type]
   * Resource type
   *
   * @param {object} [connection.api.entity.properties.backendService.tags]
   * Resource tags
   *
   * @param {string} [connection.api.entity.properties.apiDefinitionUrl] API
   * definition Url - url where the swagger can be downloaded from
   *
   * @param {object} [connection.api.entity.properties.metadata] Free form object
   * for the data caller wants to store
   *
   * @param {array} [connection.api.entity.properties.capabilities] Capabilities
   *
   * @param {object} [connection.api.entity.properties.connectionParameters]
   * Connection parameters
   *
   * @param {date} [connection.api.entity.properties.createdTime] Timestamp of
   * the connection creation
   *
   * @param {date} [connection.api.entity.properties.changedTime] Timestamp of
   * last connection change.
   *
   * @param {string} [connection.api.entity.properties.id] Resource Id
   *
   * @param {string} [connection.api.entity.properties.name] Resource Name
   *
   * @param {string} [connection.api.entity.properties.kind] Kind of resource
   *
   * @param {string} connection.api.entity.properties.location Resource Location
   *
   * @param {string} [connection.api.entity.properties.type] Resource type
   *
   * @param {object} [connection.api.entity.properties.tags] Resource tags
   *
   * @param {object} [connection.api.entity.sku] Sku description of the resource
   *
   * @param {string} [connection.api.entity.sku.name] Name of the resource sku
   *
   * @param {string} [connection.api.entity.sku.tier] Service Tier of the
   * resource sku
   *
   * @param {string} [connection.api.entity.sku.size] Size specifier of the
   * resource sku
   *
   * @param {string} [connection.api.entity.sku.family] Family code of the
   * resource sku
   *
   * @param {number} [connection.api.entity.sku.capacity] Current number of
   * instances assigned to the resource
   *
   * @param {string} [connection.api.id] Resource Id
   *
   * @param {string} [connection.api.name] Resource Name
   *
   * @param {string} [connection.api.kind] Kind of resource
   *
   * @param {string} connection.api.location Resource Location
   *
   * @param {string} [connection.api.type] Resource type
   *
   * @param {object} [connection.api.tags] Resource tags
   *
   * @param {string} [connection.id] Resource Id
   *
   * @param {string} [connection.name] Resource Name
   *
   * @param {string} [connection.kind] Kind of resource
   *
   * @param {string} connection.location Resource Location
   *
   * @param {string} [connection.type] Resource type
   *
   * @param {object} [connection.tags] Resource tags
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Connection} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Connection} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  createOrUpdate(resourceGroupName, connectionName, connection, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._createOrUpdate(resourceGroupName, connectionName, connection, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._createOrUpdate(resourceGroupName, connectionName, connection, options, optionalCallback);
    }
  }

  /**
   * Deletes a connection.
   *
   * @param {string} resourceGroupName The resource group name.
   *
   * @param {string} connectionName The connection name.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  deleteMethodWithHttpOperationResponse(resourceGroupName, connectionName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._deleteMethod(resourceGroupName, connectionName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Deletes a connection.
   *
   * @param {string} resourceGroupName The resource group name.
   *
   * @param {string} connectionName The connection name.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteMethod(resourceGroupName, connectionName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._deleteMethod(resourceGroupName, connectionName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._deleteMethod(resourceGroupName, connectionName, options, optionalCallback);
    }
  }

  /**
   * Lists consent links of a connection.
   *
   * @param {string} resourceGroupName The resource group name.
   *
   * @param {string} connectionName The connection name.
   *
   * @param {object} content The content.
   *
   * @param {array} [content.parameters] Array of links
   *
   * @param {string} [content.id] Resource Id
   *
   * @param {string} [content.name] Resource Name
   *
   * @param {string} [content.kind] Kind of resource
   *
   * @param {string} content.location Resource Location
   *
   * @param {string} [content.type] Resource type
   *
   * @param {object} [content.tags] Resource tags
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ConsentLinkPayload>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listConsentLinksWithHttpOperationResponse(resourceGroupName, connectionName, content, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._listConsentLinks(resourceGroupName, connectionName, content, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Lists consent links of a connection.
   *
   * @param {string} resourceGroupName The resource group name.
   *
   * @param {string} connectionName The connection name.
   *
   * @param {object} content The content.
   *
   * @param {array} [content.parameters] Array of links
   *
   * @param {string} [content.id] Resource Id
   *
   * @param {string} [content.name] Resource Name
   *
   * @param {string} [content.kind] Kind of resource
   *
   * @param {string} content.location Resource Location
   *
   * @param {string} [content.type] Resource type
   *
   * @param {object} [content.tags] Resource tags
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {ConsentLinkPayload} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ConsentLinkPayload} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  listConsentLinks(resourceGroupName, connectionName, content, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._listConsentLinks(resourceGroupName, connectionName, content, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._listConsentLinks(resourceGroupName, connectionName, content, options, optionalCallback);
    }
  }

  /**
   * Confirms consent code of a connection.
   *
   * @param {string} resourceGroupName The resource group name.
   *
   * @param {string} connectionName The connection name.
   *
   * @param {object} content The content.
   *
   * @param {string} [content.principalType] Principal type. Possible values
   * include: 'ActiveDirectory', 'Connection', 'MicrosoftAccount'
   *
   * @param {string} [content.tenantId] Tenant Id
   *
   * @param {string} [content.objectId] AAD object ID. This is userId
   *
   * @param {string} [content.code] Code that was returned during consent flow
   *
   * @param {string} [content.id] Resource Id
   *
   * @param {string} [content.name] Resource Name
   *
   * @param {string} [content.kind] Kind of resource
   *
   * @param {string} content.location Resource Location
   *
   * @param {string} [content.type] Resource type
   *
   * @param {object} [content.tags] Resource tags
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Connection>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  confirmConsentCodeWithHttpOperationResponse(resourceGroupName, connectionName, content, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._confirmConsentCode(resourceGroupName, connectionName, content, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Confirms consent code of a connection.
   *
   * @param {string} resourceGroupName The resource group name.
   *
   * @param {string} connectionName The connection name.
   *
   * @param {object} content The content.
   *
   * @param {string} [content.principalType] Principal type. Possible values
   * include: 'ActiveDirectory', 'Connection', 'MicrosoftAccount'
   *
   * @param {string} [content.tenantId] Tenant Id
   *
   * @param {string} [content.objectId] AAD object ID. This is userId
   *
   * @param {string} [content.code] Code that was returned during consent flow
   *
   * @param {string} [content.id] Resource Id
   *
   * @param {string} [content.name] Resource Name
   *
   * @param {string} [content.kind] Kind of resource
   *
   * @param {string} content.location Resource Location
   *
   * @param {string} [content.type] Resource type
   *
   * @param {object} [content.tags] Resource tags
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Connection} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Connection} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  confirmConsentCode(resourceGroupName, connectionName, content, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._confirmConsentCode(resourceGroupName, connectionName, content, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._confirmConsentCode(resourceGroupName, connectionName, content, options, optionalCallback);
    }
  }

  /**
   * Lists connection keys.
   *
   * @param {string} resourceGroupName The resource group name.
   *
   * @param {string} connectionName The connection name.
   *
   * @param {object} content The content.
   *
   * @param {string} [content.validityTimeSpan] time span for how long the keys
   * will be valid
   *
   * @param {string} [content.id] Resource Id
   *
   * @param {string} [content.name] Resource Name
   *
   * @param {string} [content.kind] Kind of resource
   *
   * @param {string} content.location Resource Location
   *
   * @param {string} [content.type] Resource type
   *
   * @param {object} [content.tags] Resource tags
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ConnectionSecrets>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listConnectionKeysWithHttpOperationResponse(resourceGroupName, connectionName, content, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._listConnectionKeys(resourceGroupName, connectionName, content, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Lists connection keys.
   *
   * @param {string} resourceGroupName The resource group name.
   *
   * @param {string} connectionName The connection name.
   *
   * @param {object} content The content.
   *
   * @param {string} [content.validityTimeSpan] time span for how long the keys
   * will be valid
   *
   * @param {string} [content.id] Resource Id
   *
   * @param {string} [content.name] Resource Name
   *
   * @param {string} [content.kind] Kind of resource
   *
   * @param {string} content.location Resource Location
   *
   * @param {string} [content.type] Resource type
   *
   * @param {object} [content.tags] Resource tags
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {ConnectionSecrets} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ConnectionSecrets} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  listConnectionKeys(resourceGroupName, connectionName, content, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._listConnectionKeys(resourceGroupName, connectionName, content, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._listConnectionKeys(resourceGroupName, connectionName, content, options, optionalCallback);
    }
  }

  /**
   * @summary Get Connections
   *
   * Gets a list of connections.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ConnectionCollection>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listNextWithHttpOperationResponse(nextPageLink, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._listNext(nextPageLink, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Get Connections
   *
   * Gets a list of connections.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {ConnectionCollection} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ConnectionCollection} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  listNext(nextPageLink, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._listNext(nextPageLink, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._listNext(nextPageLink, options, optionalCallback);
    }
  }

}

module.exports = Connections;
