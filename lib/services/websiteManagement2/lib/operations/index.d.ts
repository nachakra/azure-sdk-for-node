/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback, HttpOperationResponse } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * ManagedApis
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the WebSiteManagementClient.
 */
export interface ManagedApis {


    /**
     * @summary List managed Apis
     *
     * Gets a list of managed APIs.
     *
     * @param {string} location The location.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApisCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(location: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApisCollection>>;

    /**
     * @summary List managed Apis
     *
     * Gets a list of managed APIs.
     *
     * @param {string} location The location.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApisCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApisCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApisCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(location: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApisCollection>;
    list(location: string, callback: ServiceCallback<models.ApisCollection>): void;
    list(location: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApisCollection>): void;


    /**
     * @summary Get managed API
     *
     * Gets a managed API.
     *
     * @param {string} location The location.
     *
     * @param {string} apiName The managed API name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.exportProperty] flag showing whether to export API
     * definition in format specified by Accept header.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApiEntity>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(location: string, apiName: string, options?: { exportProperty? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApiEntity>>;

    /**
     * @summary Get managed API
     *
     * Gets a managed API.
     *
     * @param {string} location The location.
     *
     * @param {string} apiName The managed API name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.exportProperty] flag showing whether to export API
     * definition in format specified by Accept header.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApiEntity} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApiEntity} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApiEntity} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(location: string, apiName: string, options?: { exportProperty? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<models.ApiEntity>;
    get(location: string, apiName: string, callback: ServiceCallback<models.ApiEntity>): void;
    get(location: string, apiName: string, options: { exportProperty? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApiEntity>): void;


    /**
     * @summary List managed Apis
     *
     * Gets a list of managed APIs.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApisCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApisCollection>>;

    /**
     * @summary List managed Apis
     *
     * Gets a list of managed APIs.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApisCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApisCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApisCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApisCollection>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.ApisCollection>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApisCollection>): void;
}

/**
 * @class
 * Connections
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the WebSiteManagementClient.
 */
export interface Connections {


    /**
     * @summary Get Connections
     *
     * Gets a list of connections.
     *
     * @param {string} resourceGroupName Resource Group Name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.top] The number of items to be included in the
     * result.
     *
     * @param {string} [options.filter] The filter to apply on the operation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ConnectionCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(resourceGroupName: string, options?: { top? : number, filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ConnectionCollection>>;

    /**
     * @summary Get Connections
     *
     * Gets a list of connections.
     *
     * @param {string} resourceGroupName Resource Group Name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.top] The number of items to be included in the
     * result.
     *
     * @param {string} [options.filter] The filter to apply on the operation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ConnectionCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ConnectionCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ConnectionCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(resourceGroupName: string, options?: { top? : number, filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ConnectionCollection>;
    list(resourceGroupName: string, callback: ServiceCallback<models.ConnectionCollection>): void;
    list(resourceGroupName: string, options: { top? : number, filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ConnectionCollection>): void;


    /**
     * Gets a connection.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} connectionName The connection name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Connection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, connectionName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Connection>>;

    /**
     * Gets a connection.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} connectionName The connection name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Connection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Connection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Connection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, connectionName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Connection>;
    get(resourceGroupName: string, connectionName: string, callback: ServiceCallback<models.Connection>): void;
    get(resourceGroupName: string, connectionName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Connection>): void;


    /**
     * Creates or updates a connection.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} connectionName The connection name.
     *
     * @param {object} connection The connection.
     *
     * @param {string} [connection.connectionName] connection name
     *
     * @param {string} [connection.displayName] display name
     *
     * @param {array} [connection.statuses] Status of the connection
     *
     * @param {object} [connection.customParameterValues] Custom login setting
     * values.
     *
     * @param {string} [connection.tenantId]
     *
     * @param {object} [connection.parameterValues] Tokens/Claim
     *
     * @param {object} [connection.nonSecretParameterValues] Tokens/Claim
     *
     * @param {object} [connection.metadata]
     *
     * @param {date} [connection.firstExpirationTime] Time in UTC when the first
     * expiration of OAuth tokens
     *
     * @param {array} [connection.keywords] List of Keywords that tag the acl
     *
     * @param {date} [connection.createdTime] Timestamp of the connection creation
     *
     * @param {date} [connection.changedTime] Timestamp of last connection change.
     *
     * @param {object} [connection.api] expanded connection provider name
     *
     * @param {string} [connection.api.expandedParentApiEntityId] Id of connection
     * provider
     *
     * @param {object} [connection.api.entity] Id of connection provider
     *
     * @param {string} [connection.api.entity.id] Resource Id. Typically id is
     * populated only for responses to GET requests. Caller is responsible for
     * passing in this
     * value for GET requests only.
     * For example:
     * /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupId}/providers/Microsoft.Web/sites/{sitename}
     *
     * @param {string} [connection.api.entity.name] Name of resource
     *
     * @param {string} [connection.api.entity.type] Type of resource e.g
     * Microsoft.Web/sites
     *
     * @param {string} [connection.api.entity.location] Geo region resource belongs
     * to e.g. SouthCentralUS, SouthEastAsia
     *
     * @param {object} [connection.api.entity.tags] Tags associated with resource
     *
     * @param {object} [connection.api.entity.plan] Azure resource manager plan
     *
     * @param {string} [connection.api.entity.plan.name] The name
     *
     * @param {string} [connection.api.entity.plan.publisher] The publisher
     *
     * @param {string} [connection.api.entity.plan.product] The product
     *
     * @param {string} [connection.api.entity.plan.promotionCode] The promotion
     * code
     *
     * @param {string} [connection.api.entity.plan.version] Version of product
     *
     * @param {object} [connection.api.entity.properties] Resource specific
     * properties
     *
     * @param {string} [connection.api.entity.properties.apiEntityName] Name of the
     * API
     * the URL path of this API when exposed via APIM
     *
     * @param {object} [connection.api.entity.properties.generalInformation] the
     * URL path of this API when exposed via APIM
     *
     * @param {string}
     * [connection.api.entity.properties.generalInformation.iconUrl] Icon Url
     *
     * @param {string}
     * [connection.api.entity.properties.generalInformation.displayName] Display
     * Name
     *
     * @param {string}
     * [connection.api.entity.properties.generalInformation.description]
     * Description
     *
     * @param {string}
     * [connection.api.entity.properties.generalInformation.termsOfUseUrl] a public
     * accessible url of the Terms Of Use Url of this API
     *
     * @param {string}
     * [connection.api.entity.properties.generalInformation.connectionDisplayName]
     * DefaultConnectionNameTemplate
     *
     * @param {object}
     * [connection.api.entity.properties.generalInformation.connectionPortalUrl]
     * ConnectionPortalUrl
     *
     * @param {string} [connection.api.entity.properties.generalInformation.id]
     * Resource Id
     *
     * @param {string} [connection.api.entity.properties.generalInformation.name]
     * Resource Name
     *
     * @param {string} [connection.api.entity.properties.generalInformation.kind]
     * Kind of resource
     *
     * @param {string} connection.api.entity.properties.generalInformation.location
     * Resource Location
     *
     * @param {string} [connection.api.entity.properties.generalInformation.type]
     * Resource type
     *
     * @param {object} [connection.api.entity.properties.generalInformation.tags]
     * Resource tags
     *
     * @param {string} [connection.api.entity.properties.path] the URL path of this
     * API when exposed via APIM
     *
     * @param {array} [connection.api.entity.properties.runtimeUrls] Read only
     * property returning the runtime endpoints where the API can be called
     *
     * @param {array} [connection.api.entity.properties.protocols] Protocols
     * supported by the front end - http/https
     *
     * @param {object} [connection.api.entity.properties.policies] API policies
     *
     * @param {string} [connection.api.entity.properties.policies.content] Content
     * of xml policy
     *
     * @param {string} [connection.api.entity.properties.policies.id] Resource Id
     *
     * @param {string} [connection.api.entity.properties.policies.name] Resource
     * Name
     *
     * @param {string} [connection.api.entity.properties.policies.kind] Kind of
     * resource
     *
     * @param {string} connection.api.entity.properties.policies.location Resource
     * Location
     *
     * @param {string} [connection.api.entity.properties.policies.type] Resource
     * type
     *
     * @param {object} [connection.api.entity.properties.policies.tags] Resource
     * tags
     *
     * @param {object} [connection.api.entity.properties.backendService] Backend
     * service definition
     *
     * @param {string} [connection.api.entity.properties.backendService.serviceUrl]
     * Url from which the swagger payload will be fetched
     *
     * @param {array}
     * [connection.api.entity.properties.backendService.hostingEnvironmentServiceUrls]
     * Service Urls per Hosting environment
     *
     * @param {string} [connection.api.entity.properties.backendService.id]
     * Resource Id
     *
     * @param {string} [connection.api.entity.properties.backendService.name]
     * Resource Name
     *
     * @param {string} [connection.api.entity.properties.backendService.kind] Kind
     * of resource
     *
     * @param {string} connection.api.entity.properties.backendService.location
     * Resource Location
     *
     * @param {string} [connection.api.entity.properties.backendService.type]
     * Resource type
     *
     * @param {object} [connection.api.entity.properties.backendService.tags]
     * Resource tags
     *
     * @param {string} [connection.api.entity.properties.apiDefinitionUrl] API
     * definition Url - url where the swagger can be downloaded from
     *
     * @param {object} [connection.api.entity.properties.metadata] Free form object
     * for the data caller wants to store
     *
     * @param {array} [connection.api.entity.properties.capabilities] Capabilities
     *
     * @param {object} [connection.api.entity.properties.connectionParameters]
     * Connection parameters
     *
     * @param {date} [connection.api.entity.properties.createdTime] Timestamp of
     * the connection creation
     *
     * @param {date} [connection.api.entity.properties.changedTime] Timestamp of
     * last connection change.
     *
     * @param {string} [connection.api.entity.properties.id] Resource Id
     *
     * @param {string} [connection.api.entity.properties.name] Resource Name
     *
     * @param {string} [connection.api.entity.properties.kind] Kind of resource
     *
     * @param {string} connection.api.entity.properties.location Resource Location
     *
     * @param {string} [connection.api.entity.properties.type] Resource type
     *
     * @param {object} [connection.api.entity.properties.tags] Resource tags
     *
     * @param {object} [connection.api.entity.sku] Sku description of the resource
     *
     * @param {string} [connection.api.entity.sku.name] Name of the resource sku
     *
     * @param {string} [connection.api.entity.sku.tier] Service Tier of the
     * resource sku
     *
     * @param {string} [connection.api.entity.sku.size] Size specifier of the
     * resource sku
     *
     * @param {string} [connection.api.entity.sku.family] Family code of the
     * resource sku
     *
     * @param {number} [connection.api.entity.sku.capacity] Current number of
     * instances assigned to the resource
     *
     * @param {string} [connection.api.id] Resource Id
     *
     * @param {string} [connection.api.name] Resource Name
     *
     * @param {string} [connection.api.kind] Kind of resource
     *
     * @param {string} connection.api.location Resource Location
     *
     * @param {string} [connection.api.type] Resource type
     *
     * @param {object} [connection.api.tags] Resource tags
     *
     * @param {string} [connection.id] Resource Id
     *
     * @param {string} [connection.name] Resource Name
     *
     * @param {string} [connection.kind] Kind of resource
     *
     * @param {string} connection.location Resource Location
     *
     * @param {string} [connection.type] Resource type
     *
     * @param {object} [connection.tags] Resource tags
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Connection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, connectionName: string, connection: models.Connection, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Connection>>;

    /**
     * Creates or updates a connection.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} connectionName The connection name.
     *
     * @param {object} connection The connection.
     *
     * @param {string} [connection.connectionName] connection name
     *
     * @param {string} [connection.displayName] display name
     *
     * @param {array} [connection.statuses] Status of the connection
     *
     * @param {object} [connection.customParameterValues] Custom login setting
     * values.
     *
     * @param {string} [connection.tenantId]
     *
     * @param {object} [connection.parameterValues] Tokens/Claim
     *
     * @param {object} [connection.nonSecretParameterValues] Tokens/Claim
     *
     * @param {object} [connection.metadata]
     *
     * @param {date} [connection.firstExpirationTime] Time in UTC when the first
     * expiration of OAuth tokens
     *
     * @param {array} [connection.keywords] List of Keywords that tag the acl
     *
     * @param {date} [connection.createdTime] Timestamp of the connection creation
     *
     * @param {date} [connection.changedTime] Timestamp of last connection change.
     *
     * @param {object} [connection.api] expanded connection provider name
     *
     * @param {string} [connection.api.expandedParentApiEntityId] Id of connection
     * provider
     *
     * @param {object} [connection.api.entity] Id of connection provider
     *
     * @param {string} [connection.api.entity.id] Resource Id. Typically id is
     * populated only for responses to GET requests. Caller is responsible for
     * passing in this
     * value for GET requests only.
     * For example:
     * /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupId}/providers/Microsoft.Web/sites/{sitename}
     *
     * @param {string} [connection.api.entity.name] Name of resource
     *
     * @param {string} [connection.api.entity.type] Type of resource e.g
     * Microsoft.Web/sites
     *
     * @param {string} [connection.api.entity.location] Geo region resource belongs
     * to e.g. SouthCentralUS, SouthEastAsia
     *
     * @param {object} [connection.api.entity.tags] Tags associated with resource
     *
     * @param {object} [connection.api.entity.plan] Azure resource manager plan
     *
     * @param {string} [connection.api.entity.plan.name] The name
     *
     * @param {string} [connection.api.entity.plan.publisher] The publisher
     *
     * @param {string} [connection.api.entity.plan.product] The product
     *
     * @param {string} [connection.api.entity.plan.promotionCode] The promotion
     * code
     *
     * @param {string} [connection.api.entity.plan.version] Version of product
     *
     * @param {object} [connection.api.entity.properties] Resource specific
     * properties
     *
     * @param {string} [connection.api.entity.properties.apiEntityName] Name of the
     * API
     * the URL path of this API when exposed via APIM
     *
     * @param {object} [connection.api.entity.properties.generalInformation] the
     * URL path of this API when exposed via APIM
     *
     * @param {string}
     * [connection.api.entity.properties.generalInformation.iconUrl] Icon Url
     *
     * @param {string}
     * [connection.api.entity.properties.generalInformation.displayName] Display
     * Name
     *
     * @param {string}
     * [connection.api.entity.properties.generalInformation.description]
     * Description
     *
     * @param {string}
     * [connection.api.entity.properties.generalInformation.termsOfUseUrl] a public
     * accessible url of the Terms Of Use Url of this API
     *
     * @param {string}
     * [connection.api.entity.properties.generalInformation.connectionDisplayName]
     * DefaultConnectionNameTemplate
     *
     * @param {object}
     * [connection.api.entity.properties.generalInformation.connectionPortalUrl]
     * ConnectionPortalUrl
     *
     * @param {string} [connection.api.entity.properties.generalInformation.id]
     * Resource Id
     *
     * @param {string} [connection.api.entity.properties.generalInformation.name]
     * Resource Name
     *
     * @param {string} [connection.api.entity.properties.generalInformation.kind]
     * Kind of resource
     *
     * @param {string} connection.api.entity.properties.generalInformation.location
     * Resource Location
     *
     * @param {string} [connection.api.entity.properties.generalInformation.type]
     * Resource type
     *
     * @param {object} [connection.api.entity.properties.generalInformation.tags]
     * Resource tags
     *
     * @param {string} [connection.api.entity.properties.path] the URL path of this
     * API when exposed via APIM
     *
     * @param {array} [connection.api.entity.properties.runtimeUrls] Read only
     * property returning the runtime endpoints where the API can be called
     *
     * @param {array} [connection.api.entity.properties.protocols] Protocols
     * supported by the front end - http/https
     *
     * @param {object} [connection.api.entity.properties.policies] API policies
     *
     * @param {string} [connection.api.entity.properties.policies.content] Content
     * of xml policy
     *
     * @param {string} [connection.api.entity.properties.policies.id] Resource Id
     *
     * @param {string} [connection.api.entity.properties.policies.name] Resource
     * Name
     *
     * @param {string} [connection.api.entity.properties.policies.kind] Kind of
     * resource
     *
     * @param {string} connection.api.entity.properties.policies.location Resource
     * Location
     *
     * @param {string} [connection.api.entity.properties.policies.type] Resource
     * type
     *
     * @param {object} [connection.api.entity.properties.policies.tags] Resource
     * tags
     *
     * @param {object} [connection.api.entity.properties.backendService] Backend
     * service definition
     *
     * @param {string} [connection.api.entity.properties.backendService.serviceUrl]
     * Url from which the swagger payload will be fetched
     *
     * @param {array}
     * [connection.api.entity.properties.backendService.hostingEnvironmentServiceUrls]
     * Service Urls per Hosting environment
     *
     * @param {string} [connection.api.entity.properties.backendService.id]
     * Resource Id
     *
     * @param {string} [connection.api.entity.properties.backendService.name]
     * Resource Name
     *
     * @param {string} [connection.api.entity.properties.backendService.kind] Kind
     * of resource
     *
     * @param {string} connection.api.entity.properties.backendService.location
     * Resource Location
     *
     * @param {string} [connection.api.entity.properties.backendService.type]
     * Resource type
     *
     * @param {object} [connection.api.entity.properties.backendService.tags]
     * Resource tags
     *
     * @param {string} [connection.api.entity.properties.apiDefinitionUrl] API
     * definition Url - url where the swagger can be downloaded from
     *
     * @param {object} [connection.api.entity.properties.metadata] Free form object
     * for the data caller wants to store
     *
     * @param {array} [connection.api.entity.properties.capabilities] Capabilities
     *
     * @param {object} [connection.api.entity.properties.connectionParameters]
     * Connection parameters
     *
     * @param {date} [connection.api.entity.properties.createdTime] Timestamp of
     * the connection creation
     *
     * @param {date} [connection.api.entity.properties.changedTime] Timestamp of
     * last connection change.
     *
     * @param {string} [connection.api.entity.properties.id] Resource Id
     *
     * @param {string} [connection.api.entity.properties.name] Resource Name
     *
     * @param {string} [connection.api.entity.properties.kind] Kind of resource
     *
     * @param {string} connection.api.entity.properties.location Resource Location
     *
     * @param {string} [connection.api.entity.properties.type] Resource type
     *
     * @param {object} [connection.api.entity.properties.tags] Resource tags
     *
     * @param {object} [connection.api.entity.sku] Sku description of the resource
     *
     * @param {string} [connection.api.entity.sku.name] Name of the resource sku
     *
     * @param {string} [connection.api.entity.sku.tier] Service Tier of the
     * resource sku
     *
     * @param {string} [connection.api.entity.sku.size] Size specifier of the
     * resource sku
     *
     * @param {string} [connection.api.entity.sku.family] Family code of the
     * resource sku
     *
     * @param {number} [connection.api.entity.sku.capacity] Current number of
     * instances assigned to the resource
     *
     * @param {string} [connection.api.id] Resource Id
     *
     * @param {string} [connection.api.name] Resource Name
     *
     * @param {string} [connection.api.kind] Kind of resource
     *
     * @param {string} connection.api.location Resource Location
     *
     * @param {string} [connection.api.type] Resource type
     *
     * @param {object} [connection.api.tags] Resource tags
     *
     * @param {string} [connection.id] Resource Id
     *
     * @param {string} [connection.name] Resource Name
     *
     * @param {string} [connection.kind] Kind of resource
     *
     * @param {string} connection.location Resource Location
     *
     * @param {string} [connection.type] Resource type
     *
     * @param {object} [connection.tags] Resource tags
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Connection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Connection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Connection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, connectionName: string, connection: models.Connection, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Connection>;
    createOrUpdate(resourceGroupName: string, connectionName: string, connection: models.Connection, callback: ServiceCallback<models.Connection>): void;
    createOrUpdate(resourceGroupName: string, connectionName: string, connection: models.Connection, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Connection>): void;


    /**
     * Deletes a connection.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} connectionName The connection name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, connectionName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a connection.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} connectionName The connection name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, connectionName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, connectionName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, connectionName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Lists consent links of a connection.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} connectionName The connection name.
     *
     * @param {object} content The content.
     *
     * @param {array} [content.parameters] Array of links
     *
     * @param {string} [content.id] Resource Id
     *
     * @param {string} [content.name] Resource Name
     *
     * @param {string} [content.kind] Kind of resource
     *
     * @param {string} content.location Resource Location
     *
     * @param {string} [content.type] Resource type
     *
     * @param {object} [content.tags] Resource tags
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ConsentLinkPayload>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listConsentLinksWithHttpOperationResponse(resourceGroupName: string, connectionName: string, content: models.ConsentLinkInput, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ConsentLinkPayload>>;

    /**
     * Lists consent links of a connection.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} connectionName The connection name.
     *
     * @param {object} content The content.
     *
     * @param {array} [content.parameters] Array of links
     *
     * @param {string} [content.id] Resource Id
     *
     * @param {string} [content.name] Resource Name
     *
     * @param {string} [content.kind] Kind of resource
     *
     * @param {string} content.location Resource Location
     *
     * @param {string} [content.type] Resource type
     *
     * @param {object} [content.tags] Resource tags
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ConsentLinkPayload} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ConsentLinkPayload} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ConsentLinkPayload} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listConsentLinks(resourceGroupName: string, connectionName: string, content: models.ConsentLinkInput, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ConsentLinkPayload>;
    listConsentLinks(resourceGroupName: string, connectionName: string, content: models.ConsentLinkInput, callback: ServiceCallback<models.ConsentLinkPayload>): void;
    listConsentLinks(resourceGroupName: string, connectionName: string, content: models.ConsentLinkInput, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ConsentLinkPayload>): void;


    /**
     * Confirms consent code of a connection.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} connectionName The connection name.
     *
     * @param {object} content The content.
     *
     * @param {string} [content.principalType] Principal type. Possible values
     * include: 'ActiveDirectory', 'Connection', 'MicrosoftAccount'
     *
     * @param {string} [content.tenantId] Tenant Id
     *
     * @param {string} [content.objectId] AAD object ID. This is userId
     *
     * @param {string} [content.code] Code that was returned during consent flow
     *
     * @param {string} [content.id] Resource Id
     *
     * @param {string} [content.name] Resource Name
     *
     * @param {string} [content.kind] Kind of resource
     *
     * @param {string} content.location Resource Location
     *
     * @param {string} [content.type] Resource type
     *
     * @param {object} [content.tags] Resource tags
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Connection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    confirmConsentCodeWithHttpOperationResponse(resourceGroupName: string, connectionName: string, content: models.ConfirmConsentCodeInput, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Connection>>;

    /**
     * Confirms consent code of a connection.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} connectionName The connection name.
     *
     * @param {object} content The content.
     *
     * @param {string} [content.principalType] Principal type. Possible values
     * include: 'ActiveDirectory', 'Connection', 'MicrosoftAccount'
     *
     * @param {string} [content.tenantId] Tenant Id
     *
     * @param {string} [content.objectId] AAD object ID. This is userId
     *
     * @param {string} [content.code] Code that was returned during consent flow
     *
     * @param {string} [content.id] Resource Id
     *
     * @param {string} [content.name] Resource Name
     *
     * @param {string} [content.kind] Kind of resource
     *
     * @param {string} content.location Resource Location
     *
     * @param {string} [content.type] Resource type
     *
     * @param {object} [content.tags] Resource tags
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Connection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Connection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Connection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    confirmConsentCode(resourceGroupName: string, connectionName: string, content: models.ConfirmConsentCodeInput, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Connection>;
    confirmConsentCode(resourceGroupName: string, connectionName: string, content: models.ConfirmConsentCodeInput, callback: ServiceCallback<models.Connection>): void;
    confirmConsentCode(resourceGroupName: string, connectionName: string, content: models.ConfirmConsentCodeInput, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Connection>): void;


    /**
     * Lists connection keys.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} connectionName The connection name.
     *
     * @param {object} content The content.
     *
     * @param {string} [content.validityTimeSpan] time span for how long the keys
     * will be valid
     *
     * @param {string} [content.id] Resource Id
     *
     * @param {string} [content.name] Resource Name
     *
     * @param {string} [content.kind] Kind of resource
     *
     * @param {string} content.location Resource Location
     *
     * @param {string} [content.type] Resource type
     *
     * @param {object} [content.tags] Resource tags
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ConnectionSecrets>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listConnectionKeysWithHttpOperationResponse(resourceGroupName: string, connectionName: string, content: models.ListConnectionKeysInput, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ConnectionSecrets>>;

    /**
     * Lists connection keys.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} connectionName The connection name.
     *
     * @param {object} content The content.
     *
     * @param {string} [content.validityTimeSpan] time span for how long the keys
     * will be valid
     *
     * @param {string} [content.id] Resource Id
     *
     * @param {string} [content.name] Resource Name
     *
     * @param {string} [content.kind] Kind of resource
     *
     * @param {string} content.location Resource Location
     *
     * @param {string} [content.type] Resource type
     *
     * @param {object} [content.tags] Resource tags
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ConnectionSecrets} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ConnectionSecrets} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ConnectionSecrets} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listConnectionKeys(resourceGroupName: string, connectionName: string, content: models.ListConnectionKeysInput, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ConnectionSecrets>;
    listConnectionKeys(resourceGroupName: string, connectionName: string, content: models.ListConnectionKeysInput, callback: ServiceCallback<models.ConnectionSecrets>): void;
    listConnectionKeys(resourceGroupName: string, connectionName: string, content: models.ListConnectionKeysInput, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ConnectionSecrets>): void;


    /**
     * @summary Get Connections
     *
     * Gets a list of connections.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ConnectionCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ConnectionCollection>>;

    /**
     * @summary Get Connections
     *
     * Gets a list of connections.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ConnectionCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ConnectionCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ConnectionCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ConnectionCollection>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.ConnectionCollection>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ConnectionCollection>): void;
}
